* https://medium.com/@shashvatshukla/framework-vs-library-vs-platform-vs-api-vs-sdk-vs-toolkits-vs-ide-50a9473999db
* Library
	A library refers to code that provides functions that you can call from your own code to deal with common tasks.

* API
	Application Programming interface
	Library refers to the code itself, whereas API refers to the interface. 
	Allows two applications to talk to each other
	It's a contract between one piece of software to talk to another piece of software


* REST API
	Representational State Transfer API
	Also known as RESTful API
	WEB API
	Works same way that a website does. It's like loading a web page.
	Client request to the server and get back the data over the http protocol

* SDK
	Software Development Kit.
	This is a complete kit of software development tools for a specific platform.
	This “kit” can include all sorts of things such as: Libraries, APIs, IDEs, Documentation

* FRAMEWORK
	A framework is a generic structure that provides a skeleton for building applications.
	The abstraction allows for common design patterns to be easily reused while still allowing the specific details to be left to the developers.

* VPN
	hides ip
	encrypts data

* Proxy
	app level
	hides ip
	doesn't encrypt data
	Server doesn't know who is requesting
	Can cache. Proxy server will respond immediately if it has the response of the client in cache instead of communicating with the server.
	ISP proxy server can block sites.

* Firewall
	check incoming and ongoing traffic
	user can set rules for blocking traffic

* Reverse Proxy
	The client don't know which server it is connected to
	Reverse proxy will decide which server it will deliver the request of the client depending upon the availibility and location.
	Example: Google
	Can also cache

* Stateless Protocol
	The server responds to the requests based on the current state of the client. Server don't need to know any information about previous states of the client.
	Server also doesn't store the state of the client.
	Example: HTTP, UDP, DNS

* Statefull Protocol
	Keeps track of the connection information between client
	Server saves status and session information
	Example: TCP, FTP, Telnet

* HTTPS uses TLS (SSL) to encrypt normal HTTP requests and responses.

* Cookie
	An HTTP cookie is a small piece of data stored on the user's computer by the web browser while browsing a website.
	Cookies are sent using http headers.
	Stored cookie is automatically sent to the corresponding website when user visit them.

* Session
	A session is a temporary and interactive information interchange between two or more communicating devices, or between a computer and user.
	Session is stored in the server's database. Session contains information about the user.
	Sesion id is sent as a cookie to the user's browser so that the server can validate the user next time when visiting the website.

* Token
	To authorize a service to a third party(like any android application) token is used.
	Token is granted to a third party by a service if the user allows it.
	Token allows a third party to access certain information about a certain user.
	Token holds information about the permissions and user.
	Example: OAtuth, OpenID

* OAuth
	OAtuth is made for a service to authorize another service(3rd party) on behalf of the user

* Monolithic Architecture
	A monolithic application is built as a single and indivisible unit.
	The whole application will be down if one part of it is needed to be fixed.
	Easier to develop and deploy as very high skill is not necessary

* Microservice Architecture
	In microservice architecture, application is broken down into separate independent compnents and each component is maintained separately.
	The components talk to each other via api calls.
	Separate unit can be easily fixed and during that time only that service of the app will be unaccesible to the user
	Example: Facebook

* Encoding
	A technique for transforming data into another format for transmitting or various reason.
	To transmit a image over the url, image needs to be converted into base64 format characters. Then it can be transfared and upon receiving, this base64 characters can be docoded into the image again.

* Encryption
	Encryption is a two-way function used mainly for protection and security.
	Encrypted things can be decrypted by using proper key
	Example: Symmetric(AES), Asymmetric(RSA).

* Hashing
	Hashing converts an input into an irreversable form.
	Hashing mainly used for checking data integrity and validating.
	Same input will always generate same hash if same hashing algorithm is used.
	Example: MD4, MD5, SHA

* Symmetric Encryption
	Symmetric encryption is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information.
	The entities communicating via symmetric encryption must exchange the key so that it can be used in the decryption process.

* Asymetric Encryption
	public key can only encrypt the data and available to everyone.
	private key can only decrypt the data and only available to the user.

* Digital Signature
	Digital signature is an electronic verification of the sender.
	Process
		Sender send the public key to the receiver.
		Sender hashesh a data. The hash is called digest.
		Sender encrypts the digest using his private key.
		Sender sends the encrypted message and data to the receiver.
		Receiver decypts the encrypted message and hashesh the data.
		If the two are equal then the sender is verified.

* Operating System
	Operating system (OS) manages all of the software and hardware on the computer
	OS manages all the programs so that each can access the CPU.
	An operating system is the most important software that runs on a computer.
	It allows software to communicate with the hardware through system calls.

* Kernel
	A Kernel is a computer program that is the heart and core of an Operating System.
	Whenever a system starts, the Kernel is the first program that is loaded after the bootloader because the Kernel has to handle the rest of the thing of the system for the Operating System.
	The Kernel remains in the memory until the Operating System is shut-down.
	The Kernel is responsible for low-level tasks such as disk management, memory management, task management, etc.
	When a process makes a request to the Kernel, then it is called System Call.

* Process
	Process means any program is in execution.
	Process states: new, ready, running, waiting, terminated, suspended.

* Thread
	Thread is the segment of a process means a process can have multiple threads and these multiple threads are contained within a process.
	A thread have 3 states: running, ready, and blocked.
	Two Types
		User level: implemented by user and the thread management kernel is not aware of the existence of threads.
		Kernel level: kernel threads are implemented by OS.

* Deadlock
	Deadlock is a situation where a set of processes are blocked because each process is holding a resource and waiting for another resource acquired by some other process.

* Logical address are the virtual addresses used inside a process, e.g. variables. This virtual addresses represent actual locations inside the memory. Memory-Management Unit is used for mapping logical address to its corresponding physical address.

* Physical Address identifies a physical location of required data in a memory.

* Critical Section is the part of a program which tries to access shared resources.

* Semaphore
	Semaphore is simply a variable that is non-negative and shared between threads.
	Control the entry of a task into the critical section
	Used for thread synchronization
	two operations: wait, signal

* Assembler
	The Assembler is used to translate the program written in Assembly language into machine code.

* Compiler
	The language processor that reads the complete source program written in high level language as a whole in one go and translates it into an equivalent program in machine language is called as a Compiler.
	Example: C, C++, C#, Java

* Interpreter
	interpreters converts source code into intermediate code and then this intermediate code is executed line by line.