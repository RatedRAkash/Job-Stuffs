---------------------------------------------------------------------
OOP:
Object Oriented programming (OOP) is a programming paradigm that relies on the concept of classes and objects. It is used to structure a software program into simple, reusable pieces of code blueprints (usually called classes), which are used to create individual instances of objects.
Object-oriented programming is a programming paradigm based on the concept of "objects", which can contain data and code: data in the form of fields, and code, in the form of procedures.
Properties: Abstraction, Encapsulation, Inheritance, Polymorphism
---------------------------------------------------------------------
ABSTRACTION:
Showing only what needs to be seen and hiding details. Using abstract class and interface. Another example can be making helper methods and variable private and keeping only what user needs to see public.
---------------------------------------------------------------------
ENCAPSULATION:
Protect data by wrapping code around it. Getter setter are examples. We can validate them while setting instead of direct variable access. Class itself is an example of encapsulation.
--------------------------------------------------------------------
POLYMORPHISM:
*Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.
*In Java, a method signature is part of the method declaration. It's the combination of the method name and the parameter list.
*Overloading just takes the function name and parameters(signature) into account. Not the return type.
*Compile time polymorphism: Method overloading
*Run time polymorphism: Method overriding. Also known as dynamic method dispatch.
*JAVA allows same name for static and instance method. Even their return type can be different;
---------------------------------------------------------------------
INHERITANCE:
Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object
---------------------------------------------------------------------
SOLID
	Acronym for the first five object-oriented design (OOD) principles
	S - Single-responsiblity Principle
	O - Open-closed Principle
	L - Liskov Substitution Principle
	I - Interface Segregation Principle
	D - Dependency Inversion Principle
	https://www.baeldung.com/solid-principles
---------------------------------------------------------------------
Class is template or blueprint. Object is the instance of that blueprint.
https://www.javatpoint.com/difference-between-object-and-class
---------------------------------------------------------------------
*An abstract class is used if you want to provide a common, implemented functionality among all the implementations of the component. When partial implementation is needed, abstract class should be used.
*Abstrct class can have contractor, interface can't.
---------------------------------------------------------------------
Default in java:
https://www.javacodemonk.com/diamond-problem-of-inheritance-in-java-8-88faf6c9
---------------------------------------------------------------------
*An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions.
*when an error occurred, creating an exception object and handing it to the runtime system is called throwing an exception.
*https://www.javatpoint.com/exception-handling-in-java
---------------------------------------------------------------------
Error vs exception: https://www.tutorialspoint.com/difference-between-exception-and-error-in-java
---------------------------------------------------------------------
FINAL:
*Final variable can only be initialized after declaration inside a constructor. Also final static variable can only be initialized after declaration inside static block.
*Final variable can't be changed
*Final and private method can't be overridden
*Final class cannot be extended
*parameters can be final too
*constructor can't be final
---------------------------------------------------------------------
METHOD REFERENCE:
https://www.baeldung.com/java-method-references
https://www.javatpoint.com/java-8-method-reference
https://youtu.be/svQKKg3aFzo
---------------------------------------------------------------------
STATIC: https://www.javatpoint.com/static-keyword-in-java
The static block is a block of statement inside a Java class that will be executed when a class is first loaded into the JVM. A static block helps to initialize the static data members
---------------------------------------------------------------------
Threading:
* Join: The parent thread waits until the joined thread is terminated. Defined in Thread class.
* Wait: Can only be called inside synchronized method or block. wait() causes the accessing thread to go into waiting state until any other thread which is accessing the same resource calls notify() or notifyAll(). Defined in Object class.
* Notify: Notify arbitrarily wakes up any thread which is waiting on the same resource. notifyAll() will wake up all the thread waiting on the same resource. Defined in Object class.
---------------------------------------------------------------------
Heap:
* Heap is a free-floating region of memory. It is used by programming languages to store global variables. By default, all global variable are stored in heap memory space. It supports Dynamic memory allocation.
* In java class instances and arrays are stored in heap.
String Pool:
* It is a memory area inside the heap memory.
* If we use literal to create string then if the string already exists in pool memory then it will just return the address of it. Else new string will be created in the pool
* If we use new keyword then one string will be created on the heap and if the pool doesn't have that string, the same string will be created on the pool. But the memory address of the heap string will be returned
* some_string.intern() method will return the pool copy of the string or create the string in the pool then return.
* https://medium.com/javarevisited/what-does-string-pool-mean-in-java-414c725fbd59
---------------------------------------------------------------------
Literals:
int decimal = 100;
int octal = 0144;
int hexa = 0x64;
int binary = 0b111;
*https://www.geeksforgeeks.org/literals-in-java/
---------------------------------------------------------------------